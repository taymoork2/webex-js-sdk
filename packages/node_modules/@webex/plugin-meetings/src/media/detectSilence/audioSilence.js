/*
  Code influenced from:
    - https://stackoverflow.com/questions/46543341/how-can-i-extract-the-preceding-audio-from-microphone-as-a-buffer-when-silence
    - https://github.com/twilio/twilio-video.js/blob/master/lib/util/detectsilentvideo.js
    - https://github.com/twilio/twilio-video.js/blob/master/lib/util/detectsilentaudio.js
    - https://github.com/twilio/twilio-video.js/blob/master/lib/webaudio/detectsilence.js
*/

/**
 * Attempt to detect silence. The Promise returned by this function returns
 * false as soon as audio is detected or true after `timeout` milliseconds.
 *
 * @param {AudioContext} audioContext
 * @param {MediaStream} stream
 * @param {number?} [timeout=250]
 * @returns {Promise<boolean>}
 */
const checkAudioSilence = (audioContext, stream, timeout = 250) => {
  // Create new MediaStream from the audio stream being passed through
  const source = audioContext.createMediaStreamSource(stream);
  // Create new AnalyzerNode to analyzer frequency data
  const analyser = audioContext.createAnalyser();

  // Window size of the frequency
  analyser.fftSize = 2048; // Default value is 2048
  source.connect(analyser);

  // ByteTimeDomainData array
  const bttData = new Uint8Array(analyser.fftSize); // Uint8Array should be the same length as the fftSize

  let timedOut = false;

  setTimeout(() => {
    timedOut = true;
  }, timeout);

  const doDetectSilence = () => {
    if (timedOut) {
      return Promise.resolve(true);
    }

    analyser.getByteTimeDomainData(bttData); // fill the Uint8Array with data returned from getByteTimeDomainData()

    // NOTE(mpatwardhan): An audio MediaStreamTrack can be silent either due to all samples
    // being equal to 128 or all samples being equal to 0.
    return bttData.some((sample) => sample !== 128 && sample !== 0) ?
      Promise.resolve(false) :
      new Promise((resolve) => setTimeout(resolve, timeout)).then(doDetectSilence);
  };

  return doDetectSilence().then((isSilent) => {
    source.disconnect();

    return isSilent;
  }, (error) => {
    source.disconnect();
    throw error;
  });
};

export default checkAudioSilence;
